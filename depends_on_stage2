#!/usr/bin/env python3

"Stage2: extract dependencies of the main changeset and call stage3."

import json
import os
import re
import sys

from depends_on.common import (
    command,
    extract_depends_on,
    extract_gerrit_change,
    extract_github_change,
    extract_gitlab_change,
    filter_comments,
    init_sensitive_strings,
    is_gerrit,
    is_gitlab,
    log,
    merge_main_branch,
    save_depends_on,
    unshallow,
)


def load_depends_on(from_dir):
    "Load the data from the depends-on.json file"

    fname = os.path.join(from_dir, "depends-on.json")

    with open(fname, "r", encoding="UTF-8") as json_stream:
        data = json.load(json_stream)

    return filter_comments(data)


def extract_origin_url(work_dir):
    "Return the origin URL of the git repository in work_dir."
    origin_url = os.popen(f"cd {work_dir} && git remote get-url origin").read().strip()
    # convert ssh to https
    if origin_url.startswith("git@"):
        origin_url = origin_url.replace(":", "/", 1)
        origin_url = origin_url.replace("git@", "https://")
    # remove the .git suffix if any
    if origin_url.endswith(".git"):
        origin_url = origin_url[:-4]
    return origin_url


def extract_change(change_info, main_url, work_dir):
    "Extract the change into the work_dir directory."
    log(f"Extracting change {change_info=} into {work_dir}")
    fork_url = change_info["fork_url"]
    main_url = change_info["main_url"]
    main_branch = change_info["main_branch"]
    pr_number = change_info["pr_number"]
    if is_gerrit(fork_url):
        return extract_gerrit_change(
            fork_url, change_info["branch"], main_branch, work_dir
        )
    elif is_gitlab(fork_url):
        return extract_gitlab_change(
            main_url, fork_url, change_info["branch"], main_branch, work_dir
        )
    else:
        return extract_github_change(
            main_url,
            pr_number,
            work_dir,
        )


def extract_default_branch(work_dir) -> str:
    "Return the default branch of the git repository in work_dir."
    return os.popen(f"cd {work_dir} && git rev-parse --abbrev-ref HEAD").read().strip()


def main(check_mode):
    "Main function."

    init_sensitive_strings()

    # get the current directory
    main_dir = os.getcwd()

    data = load_depends_on(main_dir)

    if "description" not in data or data["description"] is None:
        log("No description found.")
        return 0

    depends_on = [
        u.strip().rstrip("\r")
        for u in re.findall(
            r"^Depends-On: (.*)",
            data["description"],
            re.IGNORECASE | re.MULTILINE,
        )
    ]

    if not check_mode:
        # merge the main branch to be sure to test an up-to-date version
        unshallow(".", data["main_branch"])
        merge_main_branch(".", data["main_branch"])

    if len(depends_on) == 0:
        log("No Depends-On found.")
        return 0

    log(f"depends_on: {depends_on}")

    # go to the top dir (above main_dir)
    os.chdir(os.path.join(main_dir, ".."))

    nb_unmerged_pr = 0
    change_info = {data["change_url"]: data}
    for depends_on_url in depends_on:
        merged, depends_data = extract_depends_on(
            depends_on_url,
            check_mode,
            data["extra_dirs"],
        )
        change_info[depends_on_url] = depends_data
        if not merged:
            nb_unmerged_pr += 1

    log(f"{nb_unmerged_pr} unmerged PR")

    if check_mode:
        return 1 if nb_unmerged_pr > 0 else 0

    if nb_unmerged_pr == 0:
        log("No unmerged PR found.")
        return 0

    # extract the Main-Dir: <dir> string if any from the description
    main_dir_res = re.findall(
        r"^Main-Dir: (.*)", data["description"], re.IGNORECASE | re.MULTILINE
    )

    if len(main_dir_res) > 0:
        main_dir = main_dir_res[-1].strip()

    top_dir = os.path.dirname(os.path.realpath(main_dir))

    log(f"change_info: {change_info}")

    real_extra_dirs = []
    for extra_dir in data["extra_dirs"]:
        real_extra_dir = os.path.realpath(extra_dir)
        if not os.path.isdir(real_extra_dir):
            log(f"Extra directory {real_extra_dir} does not exist.")
            return 1
        save_depends_on(data, real_extra_dir)
        real_extra_dirs.append(real_extra_dir)
        # lookup if the remote of the directory is part of the depends_on
        # if yes, then we need to extract the right branch
        origin_url = extract_origin_url(real_extra_dir)
        if not check_mode:
            main_branch = extract_default_branch(real_extra_dir)
            unshallow(real_extra_dir, main_branch)
            merge_main_branch(real_extra_dir, main_branch)
        for depends_on_url in depends_on + [data["change_url"]]:
            log(f"depends_on_url: {depends_on_url} {origin_url}")
            if depends_on_url.startswith(origin_url):
                log(f"extract {depends_on_url} in {real_extra_dir}")
                extract_change(change_info[depends_on_url], origin_url, real_extra_dir)

    for work_dir in [main_dir] + real_extra_dirs:
        log(f"+ chdir {work_dir}")
        os.chdir(work_dir)

        stage3 = os.path.join(os.path.dirname(__file__), "depends_on_stage3")

        # On macOS runners, the system Python is accessible via "python" where "python3" points to
        # the one from Homebrew. The system Python can install package via pip but not the Homebrew
        # one. In Homebrew, pyyaml has been disabled because it does not meet homebrew/core's
        # requirements for Python library formulae! It was disabled on 2024-10-06. See
        # https://github.com/orgs/Homebrew/discussions/5707. Also, the package will never be
        # installed by default in the runner see
        # https://github.com/actions/runner-images/issues/7962.
        #
        # We must either need to:
        #   - install pyyaml via the system Python and call stage3 script with the system Python
        #     instead of using "/usr/bin/env python3", so forcing like so: "python
        #     depends_on_stage3.py"
        #   - install pyyaml in a virtualenv so that the Homebrew Python can access it
        #   - break system package with "pip3 install --break-system-packages PyYAML"
        #
        # We choose to go with the virtualenv approach since it's less intrusive.
        # On macOS runners '/usr/bin/env python3' is the brew python not the system one.
        #
        # bash-3.2$ python
        # Python 3.13.1 (v3.13.1:06714517797, Dec  3 2024, 14:00:22) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin
        # Type "help", "copyright", "credits" or "license" for more information.
        # >>> __file__
        # '/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/__main__.py'
        #
        #
        # bash-3.2$ /usr/bin/env python3
        # Python 3.13.1 (main, Dec  3 2024, 17:59:52) [Clang 16.0.0 (clang-1600.0.26.4)] on darwin
        # Type "help", "copyright", "credits" or "license" for more information.
        # >>> __file__
        # '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/__main__.py'
        #
        if sys.platform == "darwin" and os.getenv("GITHUB_ACTIONS") == "true":
            # do everything at once so that we don't have to re-activate the venv
            cmd = f"""
if ! python3 -c 'import yaml'; then
    echo "PyYAML not available, installing it in a virtual env"
    python3 -m venv depends-on-venv
    source depends-on-venv/bin/activate
    python3 -m pip install PyYAML
fi
{stage3} {top_dir}
if [ -d depends-on-venv ]; then
    echo "deactivating and purging 'depends-on-venv' virtual env"
    if type deactivate >/dev/null 2>&1; then
        deactivate
    fi
    rm -rf depends-on-venv
fi
"""
            command(cmd)
        else:
            command(f"{stage3} {top_dir}")

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1] == "true"))

# depends_on_stage2 ends here
