#!/usr/bin/env python3

"""Stage2: inject the local dependencies into the main changeset.
"""

import os
import sys

from golang import process_golang
from python import process_python


def extract_repo_name(url):
    "Return the repository name from a git URL in the form github.com/<org>/<repo>."
    if not url:
        return url
    if url.endswith(".git"):
        url = url[:-4]
    return "/".join(url.split("/")[2:5])


def get_remote_url(proj_dir):
    "Return the remote URL of the git repository in proj_dir."
    origin_url = os.popen(f"cd {proj_dir} && git remote get-url origin").read().strip()
    # convert ssh to https
    if origin_url.startswith("git@"):
        origin_url = origin_url.replace(":", "/", 1)
        origin_url = origin_url.replace("git@", "https://")
    return origin_url


def directories(top_dir, main_dir):
    "Return a dict of {repo_name: dir} for all git repositories in top_dir."
    ret = {}
    for d in os.listdir(top_dir):
        key_dir = os.path.join(top_dir, d)
        if os.path.isdir(key_dir) and key_dir != main_dir:
            ret[extract_repo_name(get_remote_url(key_dir))] = key_dir
    return ret


def main():
    "Main function."
    main_dir = os.getcwd()
    top_dir = os.path.dirname(main_dir)

    dirs = directories(top_dir, main_dir)
    print(
        f"{main_dir=} {top_dir=} {dirs=} called from {__file__}!",
        file=sys.stderr,
    )

    process_golang(main_dir, dirs)
    process_python(main_dir, dirs)


if __name__ == "__main__":
    sys.exit(main())

# depends-on ends here
